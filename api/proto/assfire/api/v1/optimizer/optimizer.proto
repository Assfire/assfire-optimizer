syntax = "proto3";

package assfire.api.v1.optimizer;
option go_package = "assfire.org/api/v1/optimizer";

message GeoPoint {
    sint32 lat = 1;
    sint32 lon = 2;
}

message TimeWindow {
    int32 start = 1;
    int32 end = 2;
}

message Waypoint {
    enum State {
        WAYPOINT_STATE_PLANNED = 0;
        WAYPOINT_STATE_STARTED = 1;
        WAYPOINT_STATE_FINISHED = 2;
    };

    int32 order_id = 1;
    TimeWindow visit_time = 2;
    State state = 3;
}

message Trip {
    int32 vehicle_id = 1;
    repeated Waypoint waypoints = 2;
}

message Solution {
    repeated Trip trips = 1;
}

// May be visited multiple times during a trip, e.g. hotels, warehouses etc.
message BasePoint {
    enum Type {
        BASE_POINT_TYPE_HOTEL = 0;
    }
    enum VisitCostModel {
        BASE_POINT_VISIT_COST_MODEL_PER_WINDOW = 0;
    }
    GeoPoint location = 1;
    repeated TimeWindow time_windows = 2;
    Type type = 3;
    int32 visit_cost = 4;
}

// Is only visited once
message Order {
    enum Type {
        ORDER_TYPE_VISIT = 0;
    }
    enum VisitCostModel {
        ORDER_VISIT_COST_MODEL_PER_VISIT = 0;
    }
    GeoPoint location = 1;
    repeated TimeWindow time_windows = 2;
    Type type = 3;
    int32 visit_duration_seconds = 4;
    int32 visit_cost = 5;
}

message Vehicle {
    string transport_profile_id = 1;
}

message OptimizationTask {
    Solution initial_solution = 1;
    repeated Vehicle vehicles = 2;
    repeated Order orders = 3;
    repeated BasePoint base_points = 4;
}

message PublishOptimizationTaskRequest {
    OptimizationTask task = 1;
}

message PublishOptimizationTaskResponse {
    string id = 1;
}

message GetLatestSolutionRequest {
    string id = 1;
}

message GetLatestSolutionResponse {
    Solution solution = 1;
}

enum SolutionStatus {
    SOLUTION_STATUS_QUEUED = 0;
    SOLUTION_STATUS_IN_PROGRESS = 1;
    SOLUTION_STATUS_FAILED = 2; // Terminal
    SOLUTION_STATUS_CANCELLED = 3; // Terminal
    SOLUTION_STATUS_FINISHED = 4; // Terminal
}

message GetSolutionStatusRequest {
    string id = 1;
}

message GetSolutionStatusResponse {
    SolutionStatus status = 1;
}

message ListenToSolutionUpdatesRequest {
    string id = 1;
}

message ListenToSolutionUpdatesResponse {
    Solution solution = 1;
    SolutionStatus status = 2;
}

message CancelOptimizationTaskRequest {
    string id = 1;
}

message CancelOptimizationTaskResponse {

}

service OptimizerService {
    rpc PublishOptimizationTask(PublishOptimizationTaskRequest) returns (PublishOptimizationTaskResponse){}
    rpc GetLatestSolution(GetLatestSolutionRequest) returns (GetLatestSolutionResponse) {}
    rpc GetSolutionStatus(GetSolutionStatusRequest) returns (GetSolutionStatusResponse) {}
    rpc ListenToSolutionUpdates(ListenToSolutionUpdatesRequest) returns (stream ListenToSolutionUpdatesResponse) {}
    rpc CancelOptimizationTask(CancelOptimizationTaskRequest) returns (CancelOptimizationTaskResponse) {}
}

message GetAvailableStrategiesRequest {
  
} 

message GetAvailableStrategiesResponse {
  repeated string strategies = 1;
} 

message GetAvailableTransportProfilesRequest {
  
}

message GetAvailableTransportProfilesResponse {
  repeated string transport_profiles = 1;
}

service ConfigurationService {
    rpc GetAvailableStrategies(GetAvailableStrategiesRequest) returns (GetAvailableStrategiesResponse) {}
    rpc GetAvailableTransportProfiles(GetAvailableTransportProfilesRequest) returns (GetAvailableTransportProfilesResponse) {};
}